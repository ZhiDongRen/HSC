-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_fixed is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (15 downto 0);
    h_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    h_V_ce0 : OUT STD_LOGIC;
    h_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    y_V : OUT STD_LOGIC_VECTOR (16 downto 0);
    y_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir_fixed is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fixed,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z007s-clg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=502,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=110,HLS_SYN_LUT=174,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_63 : STD_LOGIC_VECTOR (7 downto 0) := "01100011";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal regs_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal regs_V_ce0 : STD_LOGIC;
    signal regs_V_we0 : STD_LOGIC;
    signal regs_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal regs_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln8_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln8_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln9_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_201_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_275 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln14_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_V_load_reg_290 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regs_V_load_1_reg_295 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_i_0_phi_fu_129_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_125 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_137 : STD_LOGIC_VECTOR (16 downto 0);
    signal i1_0_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln12_1_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component fir_fixed_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_fixed_regs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    regs_V_U : component fir_fixed_regs_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => regs_V_address0,
        ce0 => regs_V_ce0,
        we0 => regs_V_we0,
        d0 => regs_V_d0,
        q0 => regs_V_q0);

    fir_fixed_mac_mulbkb_U1 : component fir_fixed_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => regs_V_load_1_reg_295,
        din1 => h_V_load_reg_290,
        din2 => grp_fu_236_p2,
        dout => grp_fu_236_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_172_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_150 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_0_reg_150 <= i_1_reg_275;
            end if; 
        end if;
    end process;

    i_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_125 <= grp_fu_161_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_125 <= ap_const_lv8_63;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_172_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_137 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_Val2_s_reg_137 <= grp_fu_236_p3(31 downto 15);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                h_V_load_reg_290 <= h_V_q0;
                regs_V_load_1_reg_295 <= regs_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_275 <= i_1_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_172_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln9_reg_258 <= icmp_ln9_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sext_ln8_reg_250 <= sext_ln8_fu_168_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_172_p3, ap_CS_fsm_state4, icmp_ln14_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_172_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_195_p2)
    begin
        if (((icmp_ln14_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_129_p4 <= i_0_reg_125;

    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_195_p2)
    begin
        if (((icmp_ln14_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_161_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_phi_mux_i_0_phi_fu_129_p4, i_0_reg_125)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_161_p0 <= i_0_reg_125;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_161_p0 <= ap_phi_mux_i_0_phi_fu_129_p4;
        else 
            grp_fu_161_p0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_fu_161_p2 <= std_logic_vector(signed(grp_fu_161_p0) + signed(ap_const_lv8_FF));
    grp_fu_236_p2 <= (p_Val2_s_reg_137 & ap_const_lv15_0);
    h_V_address0 <= zext_ln15_fu_207_p1(7 - 1 downto 0);

    h_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            h_V_ce0 <= ap_const_logic_1;
        else 
            h_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_201_p2 <= std_logic_vector(unsigned(i1_0_reg_150) + unsigned(ap_const_lv7_1));
    icmp_ln14_fu_195_p2 <= "1" when (i1_0_reg_150 = ap_const_lv7_64) else "0";
    icmp_ln9_fu_180_p2 <= "1" when (i_0_reg_125 = ap_const_lv8_0) else "0";

    regs_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_180_p2, tmp_fu_172_p3, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln12_1_fu_186_p1, zext_ln12_fu_191_p1, zext_ln15_fu_207_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            regs_V_address0 <= zext_ln15_fu_207_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regs_V_address0 <= zext_ln12_fu_191_p1(7 - 1 downto 0);
        elsif (((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regs_V_address0 <= ap_const_lv7_0;
        elsif (((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regs_V_address0 <= zext_ln12_1_fu_186_p1(7 - 1 downto 0);
        else 
            regs_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    regs_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_180_p2, tmp_fu_172_p3, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            regs_V_ce0 <= ap_const_logic_1;
        else 
            regs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    regs_V_d0_assign_proc : process(x_V, regs_V_q0, ap_CS_fsm_state2, icmp_ln9_fu_180_p2, tmp_fu_172_p3, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            regs_V_d0 <= regs_V_q0;
        elsif (((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            regs_V_d0 <= x_V;
        else 
            regs_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    regs_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_180_p2, icmp_ln9_reg_258, tmp_fu_172_p3, ap_CS_fsm_state3)
    begin
        if ((((icmp_ln9_reg_258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_172_p3 = ap_const_lv1_0) and (icmp_ln9_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            regs_V_we0 <= ap_const_logic_1;
        else 
            regs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln8_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_125),32));

    tmp_fu_172_p3 <= i_0_reg_125(7 downto 7);
    y_V <= p_Val2_s_reg_137;

    y_V_ap_vld_assign_proc : process(ap_CS_fsm_state4, icmp_ln14_fu_195_p2)
    begin
        if (((icmp_ln14_fu_195_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln12_1_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_161_p2),64));
    zext_ln12_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln8_reg_250),64));
    zext_ln15_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_150),64));
end behav;
