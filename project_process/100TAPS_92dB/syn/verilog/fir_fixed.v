// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fixed,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z007s-clg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=502,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=110,HLS_SYN_LUT=174,HLS_VERSION=2019_1}" *)

module fir_fixed (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        h_V_address0,
        h_V_ce0,
        h_V_q0,
        y_V,
        y_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x_V;
output  [6:0] h_V_address0;
output   h_V_ce0;
input  [15:0] h_V_q0;
output  [16:0] y_V;
output   y_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg h_V_ce0;
reg y_V_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] regs_V_address0;
reg    regs_V_ce0;
reg    regs_V_we0;
reg   [15:0] regs_V_d0;
wire   [15:0] regs_V_q0;
wire  signed [31:0] sext_ln8_fu_160_p1;
reg  signed [31:0] sext_ln8_reg_242;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln9_fu_172_p2;
reg   [0:0] icmp_ln9_reg_250;
wire   [0:0] tmp_fu_164_p3;
wire   [7:0] grp_fu_153_p2;
wire    ap_CS_fsm_state3;
wire   [6:0] i_1_fu_193_p2;
reg   [6:0] i_1_reg_267;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln14_fu_187_p2;
reg  signed [15:0] h_V_load_reg_282;
wire    ap_CS_fsm_state5;
reg  signed [15:0] regs_V_load_1_reg_287;
wire    ap_CS_fsm_state6;
wire  signed [7:0] ap_phi_mux_i_0_phi_fu_121_p4;
reg  signed [7:0] i_0_reg_117;
reg   [16:0] p_Val2_s_reg_129;
reg   [6:0] i1_0_reg_142;
wire   [63:0] zext_ln12_1_fu_178_p1;
wire   [63:0] zext_ln12_fu_183_p1;
wire   [63:0] zext_ln15_fu_199_p1;
reg  signed [7:0] grp_fu_153_p0;
wire  signed [31:0] grp_fu_228_p3;
wire   [31:0] grp_fu_228_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

fir_fixed_regs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
regs_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(regs_V_address0),
    .ce0(regs_V_ce0),
    .we0(regs_V_we0),
    .d0(regs_V_d0),
    .q0(regs_V_q0)
);

fir_fixed_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_fixed_mac_mulbkb_U1(
    .din0(regs_V_load_1_reg_287),
    .din1(h_V_load_reg_282),
    .din2(grp_fu_228_p2),
    .dout(grp_fu_228_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_164_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_142 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i1_0_reg_142 <= i_1_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_117 <= grp_fu_153_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_117 <= 8'd99;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_164_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_129 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_s_reg_129 <= {{grp_fu_228_p3[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_V_load_reg_282 <= h_V_q0;
        regs_V_load_1_reg_287 <= regs_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_267 <= i_1_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_164_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln9_reg_250 <= icmp_ln9_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sext_ln8_reg_242 <= sext_ln8_fu_160_p1;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_153_p0 = i_0_reg_117;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_153_p0 = ap_phi_mux_i_0_phi_fu_121_p4;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        h_V_ce0 = 1'b1;
    end else begin
        h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        regs_V_address0 = zext_ln15_fu_199_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_V_address0 = zext_ln12_fu_183_p1;
    end else if (((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_address0 = 7'd0;
    end else if (((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_address0 = zext_ln12_1_fu_178_p1;
    end else begin
        regs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        regs_V_ce0 = 1'b1;
    end else begin
        regs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_V_d0 = regs_V_q0;
    end else if (((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_d0 = x_V;
    end else begin
        regs_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln9_reg_250 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_fu_164_p3 == 1'd0) & (icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        regs_V_we0 = 1'b1;
    end else begin
        regs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_164_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_phi_mux_i_0_phi_fu_121_p4 = i_0_reg_117;

assign grp_fu_153_p2 = ($signed(grp_fu_153_p0) + $signed(8'd255));

assign grp_fu_228_p2 = {{p_Val2_s_reg_129}, {15'd0}};

assign h_V_address0 = zext_ln15_fu_199_p1;

assign i_1_fu_193_p2 = (i1_0_reg_142 + 7'd1);

assign icmp_ln14_fu_187_p2 = ((i1_0_reg_142 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_172_p2 = ((i_0_reg_117 == 8'd0) ? 1'b1 : 1'b0);

assign sext_ln8_fu_160_p1 = i_0_reg_117;

assign tmp_fu_164_p3 = i_0_reg_117[32'd7];

assign y_V = p_Val2_s_reg_129;

assign zext_ln12_1_fu_178_p1 = grp_fu_153_p2;

assign zext_ln12_fu_183_p1 = $unsigned(sext_ln8_reg_242);

assign zext_ln15_fu_199_p1 = i1_0_reg_142;

endmodule //fir_fixed
