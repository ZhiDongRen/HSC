// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fixed,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z007s-clg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=302,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=2,HLS_SYN_FF=176,HLS_SYN_LUT=252,HLS_VERSION=2019_1}" *)

module fir_fixed (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_V,
        h_V_address0,
        h_V_ce0,
        h_V_q0,
        h_V_address1,
        h_V_ce1,
        h_V_q1,
        y_V,
        y_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] x_V;
output  [6:0] h_V_address0;
output   h_V_ce0;
input  [15:0] h_V_q0;
output  [6:0] h_V_address1;
output   h_V_ce1;
input  [15:0] h_V_q1;
output  [16:0] y_V;
output   y_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg h_V_ce0;
reg h_V_ce1;
reg y_V_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] regs_V_address0;
reg    regs_V_ce0;
reg    regs_V_we0;
reg   [15:0] regs_V_d0;
wire   [15:0] regs_V_q0;
reg   [6:0] regs_V_address1;
reg    regs_V_ce1;
reg    regs_V_we1;
reg   [15:0] regs_V_d1;
wire   [15:0] regs_V_q1;
wire  signed [31:0] i_0_0_cast_fu_212_p1;
reg  signed [31:0] i_0_0_cast_reg_362;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln9_fu_224_p2;
reg   [0:0] icmp_ln9_reg_370;
wire   [0:0] tmp_1_fu_216_p3;
wire  signed [31:0] sext_ln8_fu_239_p1;
reg  signed [31:0] sext_ln8_reg_379;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln9_1_fu_243_p2;
reg   [0:0] icmp_ln9_1_reg_384;
wire   [7:0] grp_fu_206_p2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln14_fu_262_p2;
wire   [6:0] add_ln14_fu_286_p2;
reg   [6:0] add_ln14_reg_421;
reg  signed [15:0] h_V_load_reg_426;
wire    ap_CS_fsm_state6;
reg  signed [15:0] regs_V_load_1_reg_431;
reg  signed [15:0] h_V_load_1_reg_436;
reg  signed [15:0] regs_V_load_2_reg_441;
wire    ap_CS_fsm_state7;
wire  signed [7:0] ap_phi_mux_i_0_0_phi_fu_167_p4;
reg  signed [7:0] i_0_0_reg_163;
reg   [16:0] p_Val2_0_reg_175;
reg   [6:0] i1_0_0_reg_188;
wire   [63:0] zext_ln12_1_fu_230_p1;
wire   [63:0] zext_ln12_fu_235_p1;
wire   [63:0] zext_ln12_3_fu_253_p1;
wire   [63:0] zext_ln12_2_fu_258_p1;
wire   [63:0] zext_ln15_fu_268_p1;
wire   [63:0] zext_ln15_1_fu_280_p1;
reg  signed [7:0] grp_fu_199_p0;
wire   [7:0] grp_fu_199_p2;
wire  signed [7:0] sext_ln8_fu_239_p0;
wire  signed [7:0] icmp_ln9_1_fu_243_p0;
wire  signed [31:0] sext_ln12_fu_249_p1;
wire   [6:0] or_ln14_fu_274_p2;
wire  signed [31:0] grp_fu_338_p3;
wire   [16:0] tmp_fu_312_p4;
wire  signed [31:0] grp_fu_347_p3;
wire   [31:0] grp_fu_338_p2;
wire   [31:0] grp_fu_347_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

fir_fixed_regs_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
regs_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(regs_V_address0),
    .ce0(regs_V_ce0),
    .we0(regs_V_we0),
    .d0(regs_V_d0),
    .q0(regs_V_q0),
    .address1(regs_V_address1),
    .ce1(regs_V_ce1),
    .we1(regs_V_we1),
    .d1(regs_V_d1),
    .q1(regs_V_q1)
);

fir_fixed_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_fixed_mac_mulbkb_U1(
    .din0(h_V_load_reg_426),
    .din1(regs_V_load_1_reg_431),
    .din2(grp_fu_338_p2),
    .dout(grp_fu_338_p3)
);

fir_fixed_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_fixed_mac_mulbkb_U2(
    .din0(h_V_load_1_reg_436),
    .din1(regs_V_load_2_reg_441),
    .din2(grp_fu_347_p2),
    .dout(grp_fu_347_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_216_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_0_reg_188 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i1_0_0_reg_188 <= add_ln14_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_0_reg_163 <= grp_fu_206_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_0_reg_163 <= 8'd99;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_216_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_0_reg_175 <= 17'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Val2_0_reg_175 <= {{grp_fu_347_p3[31:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln14_reg_421 <= add_ln14_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        h_V_load_1_reg_436 <= h_V_q1;
        h_V_load_reg_426 <= h_V_q0;
        regs_V_load_1_reg_431 <= regs_V_q0;
        regs_V_load_2_reg_441 <= regs_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_0_cast_reg_362 <= i_0_0_cast_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln9_1_reg_384 <= icmp_ln9_1_fu_243_p2;
        sext_ln8_reg_379 <= sext_ln8_fu_239_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_216_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln9_reg_370 <= icmp_ln9_fu_224_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln14_fu_262_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln14_fu_262_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_199_p0 = i_0_0_reg_163;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_199_p0 = ap_phi_mux_i_0_0_phi_fu_167_p4;
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_V_ce0 = 1'b1;
    end else begin
        h_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_V_ce1 = 1'b1;
    end else begin
        h_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        regs_V_address0 = zext_ln15_fu_268_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_V_address0 = zext_ln12_fu_235_p1;
    end else if (((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_address0 = 7'd0;
    end else if (((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_address0 = zext_ln12_1_fu_230_p1;
    end else begin
        regs_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        regs_V_address1 = zext_ln15_1_fu_280_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        regs_V_address1 = zext_ln12_2_fu_258_p1;
    end else if (((icmp_ln9_1_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        regs_V_address1 = 7'd0;
    end else if (((icmp_ln9_1_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        regs_V_address1 = zext_ln12_3_fu_253_p1;
    end else begin
        regs_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | ((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        regs_V_ce0 = 1'b1;
    end else begin
        regs_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln9_1_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((icmp_ln9_1_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        regs_V_ce1 = 1'b1;
    end else begin
        regs_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        regs_V_d0 = regs_V_q0;
    end else if (((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        regs_V_d0 = x_V;
    end else begin
        regs_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        regs_V_d1 = regs_V_q1;
    end else if (((icmp_ln9_1_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        regs_V_d1 = x_V;
    end else begin
        regs_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln9_reg_370 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_1_fu_216_p3 == 1'd0) & (icmp_ln9_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        regs_V_we0 = 1'b1;
    end else begin
        regs_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln9_1_reg_384 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln9_1_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        regs_V_we1 = 1'b1;
    end else begin
        regs_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln14_fu_262_p2 == 1'd1))) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_1_fu_216_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln14_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_286_p2 = (i1_0_0_reg_188 + 7'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_phi_mux_i_0_0_phi_fu_167_p4 = i_0_0_reg_163;

assign grp_fu_199_p2 = ($signed(grp_fu_199_p0) + $signed(8'd255));

assign grp_fu_206_p2 = ($signed(i_0_0_reg_163) + $signed(8'd254));

assign grp_fu_338_p2 = {{p_Val2_0_reg_175}, {15'd0}};

assign grp_fu_347_p2 = {{tmp_fu_312_p4}, {15'd0}};

assign h_V_address0 = zext_ln15_fu_268_p1;

assign h_V_address1 = zext_ln15_1_fu_280_p1;

assign i_0_0_cast_fu_212_p1 = i_0_0_reg_163;

assign icmp_ln14_fu_262_p2 = ((i1_0_0_reg_188 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_243_p0 = grp_fu_199_p2;

assign icmp_ln9_1_fu_243_p2 = ((icmp_ln9_1_fu_243_p0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_224_p2 = ((i_0_0_reg_163 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln14_fu_274_p2 = (i1_0_0_reg_188 | 7'd1);

assign sext_ln12_fu_249_p1 = $signed(grp_fu_206_p2);

assign sext_ln8_fu_239_p0 = grp_fu_199_p2;

assign sext_ln8_fu_239_p1 = sext_ln8_fu_239_p0;

assign tmp_1_fu_216_p3 = i_0_0_reg_163[32'd7];

assign tmp_fu_312_p4 = {{grp_fu_338_p3[31:15]}};

assign y_V = p_Val2_0_reg_175;

assign zext_ln12_1_fu_230_p1 = grp_fu_199_p2;

assign zext_ln12_2_fu_258_p1 = $unsigned(sext_ln8_reg_379);

assign zext_ln12_3_fu_253_p1 = $unsigned(sext_ln12_fu_249_p1);

assign zext_ln12_fu_235_p1 = $unsigned(i_0_0_cast_reg_362);

assign zext_ln15_1_fu_280_p1 = or_ln14_fu_274_p2;

assign zext_ln15_fu_268_p1 = i1_0_0_reg_188;

endmodule //fir_fixed
